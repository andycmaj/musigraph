using System;
using System.Linq;
using System.Threading.Tasks;
using Api.Models;
using MoreLinq;
using SpotifyAPI.Web;
using SpotifyAPI.Web.Enums;

namespace Api.Strategies
{
    public class SpotifyVisitNodeStrategy : IVisitNodeStrategy
    {
        private readonly SpotifyWebAPI spotify;

        public SpotifyVisitNodeStrategy(SpotifyWebAPI spotify)
        {
            this.spotify = spotify;
        }

        public async Task<AdjacentNodesResult> VisitNode(string nodeId, NodeType nodeType, int maxAdjacentNodes = 100)
        {
            switch (nodeType)
            {
                case NodeType.Artist:
                    return await GetAdjacentReleases(nodeId, maxAdjacentNodes);
                case NodeType.Release:
                    return await GetAdjacentArtists(nodeId, maxAdjacentNodes);
                default:
                    throw new NotImplementedException($"Unknown NodeType: {nodeType}");
            }
        }

        private async Task<AdjacentNodesResult> GetAdjacentReleases(string artistId, int maxAdjacentNodes)
        {
            var artist = await spotify.GetArtistAsync(artistId);

            var releases = (await spotify
                .GetArtistsAlbumsAsync(artistId, AlbumType.Album | AlbumType.AppearsOn, limit: maxAdjacentNodes, market: "US"))
                .Items
                .Select(release => new Release {
                    DataSource = "Spotify",
                    Name = release.Name,
                    MainArtist = release.Artists.First().Name,
                    ThumbnailUrl = release.Images.FirstOrDefault()?.Url,
                    Id = release.Id,
                    InfoUrl = release.ExternalUrls.FirstOrDefault().Value
                })
                .ToList();

            return new AdjacentNodesResult {
                Source = new Artist {
                    DataSource = "Spotify",
                    Id = artist.Id,
                    Name = artist.Name,
                    InfoUrl = artist.ExternalUrls.FirstOrDefault().Value
                },
                Nodes = releases
            };
        }

        private async Task<AdjacentNodesResult> GetAdjacentArtists(string releaseId, int maxAdjacentNodes)
        {
            var release = await spotify.GetAlbumAsync(releaseId);

            var artists = (release.artists ?? new DiscogsReleaseArtist[0])
                .Concat(release.extraartists)
                .Take(maxAdjacentNodes)
                .DistinctBy(artist => artist.id)
                .Select(artist => new Artist {
                    DataSource = "Discogs",
                    Name = artist.name,
                    Id = artist.id.ToString(),
                    Role = artist.role,
                    InfoUrl = $"https://www.discogs.com/artist/{artist.id}"
                })
                .ToList();

            return new AdjacentNodesResult {
                Source = new Release {
                    DataSource = "Discogs",
                    Id = release.id.ToString(),
                    Name = release.title
                },
                Nodes = artists
            };
        }
    }
}